{"version":3,"sources":["Components/WeatherCard.js","Components/WeatherCards.js","Components/Map.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","result","date","Date","dt","changeDateFormat","toLocaleDateString","firstThreeLetters","weekday","substring","weather","main","icone","className","src","alt","temp","max","min","WeatherCards","lat","lon","useState","setResult","useEffect","a","fetch","response","json","data","daily","fetchData","slice","map","value","key","MapJp","name","population","position","Map","center","zoom","TileLayer","attribution","url","Marker","Popup","App","query","setQuery","latitude","setLatitude","longitude","setLongitude","cityName","setcityName","countryName","setCountryName","setPopulation","error","setError","searchEnter","event","message","city","coord","country","pop","searchButton","type","placeholder","id","onChange","e","searchZipcode","target","onKeyPress","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.33f51d4a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst WeatherCard = ({result}) => {\r\n    // Date\r\n    let date = new Date(result.dt*1000);\r\n    let changeDateFormat = date.toLocaleDateString();\r\n    let dayOfTheWeek = date.toLocaleDateString(\"en-EN\", {weekday: \"long\"});\r\n    let firstThreeLetters = dayOfTheWeek.substring(0,3);\r\n\r\n    // Icone \r\n    let weather = result.weather[0].main;\r\n    let icone = '';\r\n    switch(weather) {\r\n        case 'Sun':\r\n            icone = \"/icone/sun.png\";\r\n            break;\r\n        case 'Rain' :\r\n            icone = \"/icone/rain.png\";\r\n            break;\r\n        case 'Snow' : \r\n            icone = \"/icone/snow.png\";\r\n            break;\r\n        case 'Clouds' :\r\n            icone = \"/icone/cloud.png\";\r\n            break;\r\n        case 'Clear' :\r\n            icone = \"/icone/clear.jpg\";\r\n            break;\r\n        default :\r\n            icone = \"No icone found\";\r\n            break;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"card\" >\r\n            <img src={icone} className=\"card-img-top\" alt={weather} />\r\n            <div className=\"card-body\">\r\n                <h4 className=\"card-title d-flex justify-content-between\">\r\n                    <span>{changeDateFormat}</span> \r\n                    <span>{firstThreeLetters}</span>\r\n                </h4>\r\n                <h2 className=\"card-text text-center\">{weather}</h2>\r\n                <h5 className=\"card-text d-flex justify-content-between\">\r\n                    <span>Max : {result.temp.max}°</span>\r\n                    <span>Min : {result.temp.min}°</span>\r\n                </h5>\r\n                \r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default WeatherCard;","import React, { useEffect, useState } from 'react';\r\nimport WeatherCard from './WeatherCard';\r\n\r\nconst WeatherCards = ({lat, lon}) => {\r\n    const [result, setResult] = useState();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            const response = await fetch('https://api.openweathermap.org/data/2.5/onecall?lat=' + lat + '&lon=' + lon + '&exclude=minutely,hourly&units=metric&appid=' + process.env.REACT_APP_API_KEY);\r\n            const data = await response.json();\r\n            // console.log(data.daily);\r\n            setResult(data.daily);\r\n        }\r\n        fetchData();\r\n    }, [lat,lon]);\r\n    return(\r\n        <div className=\"weather-card row\">\r\n           {   \r\n                (typeof result !== \"undefined\") ?\r\n                result.slice(0,3).map((value) =>(\r\n                   <WeatherCard key={value.dt} result={value} />\r\n                )) : ''\r\n           }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherCards;","import React from 'react';\r\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet';\r\n\r\nconst MapJp = ({ lat, lon, name, population }) => {\r\n    const position = [lat, lon];\r\n    const zoom = 11;\r\n    return (\r\n        <Map center={position} zoom={zoom}>\r\n            <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <Marker position={position}>\r\n                <Popup>\r\n                    <p>\r\n                        City : {name} <br/>\r\n                        Population : {population}\r\n                    </p>\r\n                </Popup>\r\n            </Marker>\r\n        </Map>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default MapJp;","import React, { useState } from 'react';\nimport './App.css';\nimport WeatherCards from './Components/WeatherCards';\nimport MapJp from './Components/Map';\n\nconst App = () => {\n\n  const [query, setQuery] = useState();\n  const [latitude, setLatitude] = useState();\n  const [longitude, setLongitude] = useState();\n  const [cityName, setcityName] = useState();\n  const [countryName, setCountryName] = useState();\n  const [population, setPopulation] = useState();\n  const [error, setError] = useState(false);\n\n  const searchInput = (e) => {\n    let searchZipcode = e.target.value;\n    setQuery(searchZipcode);\n  }\n\n  const searchEnter = async (event) => {\n    if (event.key === 'Enter') {\n\n      const response = await fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=\" + query + \"&appid=\" + process.env.REACT_APP_API_KEY);\n      const data = await response.json();\n      // console.log(data);\n      const errorMessage = data.message;\n      if (errorMessage !== \"city not found\") {\n        const lat = data.city.coord.lat;\n        const lon = data.city.coord.lon;\n        const name = data.city.name;\n        const country = data.city.country;\n        const pop = data.city.population;\n        setPopulation(pop);\n        setCountryName(country);\n        setcityName(name);\n        setLongitude(lon);\n        setLatitude(lat);\n        setError(false);\n      } else {\n        setError(true);\n      }\n      \n    }\n  }\n\n\n  const searchButton = async () => {\n\n    const response = await fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=\" + query + \"&appid=\" + process.env.REACT_APP_API_KEY);\n      const data = await response.json();\n      // console.log(data);\n      const errorMessage = data.message;\n      if (errorMessage !== \"city not found\") {\n        const lat = data.city.coord.lat;\n        const lon = data.city.coord.lon;\n        const name = data.city.name;\n        const country = data.city.country;\n        const pop = data.city.population;\n        setPopulation(pop);\n        setCountryName(country);\n        setcityName(name);\n        setLongitude(lon);\n        setLatitude(lat);\n        setError(false);\n      } else {\n        setError(true);\n      }\n  \n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n\n        <header>\n          <div className=\"row\">\n\n            <div className=\"col-12 col-lg-10 input\">\n              <input type=\"text\" name=\"city\" placeholder=\"Enter the name of a City\" id=\"city\" onChange={searchInput} onKeyPress={searchEnter} />\n            </div>\n\n            <div className=\"col-12 col-lg-2 submitButton\">\n              <button type=\"submit\" className=\"btn\" onClick={searchButton}>\n                Submit\n              </button>\n            </div>\n          </div>\n        </header>\n\n        {error === false ?\n        <main>\n\n          {\n            (typeof cityName !== 'undefined') ?\n            <section className=\"section-1\">\n              <h1> \n                { cityName } &nbsp;\n                ({ countryName })\n              </h1>\n            </section>\n             : ''\n          }     \n    \n          {\n            (typeof latitude !== \"undefined\") ?\n              <section className=\"section-2\">\n                <p className=\"text-mockup\">3-day forecast</p> \n                <WeatherCards lat={latitude} lon={longitude} />\n              </section> : ''\n          }\n\n          {\n            (typeof latitude !== \"undefined\") ?\n              <section className=\"section-3 row\">\n\n                <div className=\"center col-12 col-lg-8\">\n                  <p className=\"text-mockup\">Map</p> \n                  <MapJp lat={latitude} lon={longitude} population={population} name={cityName} />\n                </div>\n                \n              </section> : ''\n          }\n\n        </main>\n        : <div className=\"errorDisplay\"> The city that you entered is incorrect. Try again </div>\n        }\n\n\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}